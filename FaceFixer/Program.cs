using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
using System;

namespace FaceFixer
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .Run(args, new RunPreferences()
                {
                    ActionsForEmptyArgs = new RunDefaultPatcher()
                    {
                        IdentifyingModKey = "FaceFixer.esp",
                        TargetRelease = GameRelease.SkyrimSE
                    }
                });
        }
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (Settings.Value.TargetMods.Count == 0)
            {
                System.Console.WriteLine("Must at least specify one target mod in order to do anything.");
                return;
            }

            System.Console.WriteLine("Files to map to:");
            foreach (var file in Settings.Value.TargetMods)
            {
                System.Console.WriteLine($"  {file.FileName}");
            }

            var npcGroups = state.LoadOrder.ListedOrder
                .Select(listing => listing.Mod)
                .NotNull()
                .Select(x => (x.ModKey, x.Npcs))
                .Where(x => x.Npcs.Count > 0 && Settings.Value.TargetMods.Contains(x.ModKey))
                .ToList();

            uint count = 0;

            foreach (var npc in state.LoadOrder.PriorityOrder.WinningOverrides<INpcGetter>())
            {
                foreach (var npcGroup in npcGroups)
                {
                    if (!npcGroup.Npcs.RecordCache.TryGetValue(npc.FormKey, out var sourceNpc)) continue;

                    var modifiedNpc = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                    modifiedNpc.DeepCopyIn(sourceNpc, new Npc.TranslationMask(false)
                    {
                        AttackRace = true,
                        FaceMorph = true,
                        FaceParts = true,
                        FarAwayModel = true,
                        HairColor = true,
                        HeadParts = true,
                        HeadTexture = true,
                        Height = true,
                        TextureLighting = true,
                        TintLayers = true,
                        Weight = true,
                        WornArmor = true,
                    });
                    count++;
                }
            }

            System.Console.WriteLine($"Patched {count} Npcs");
        }
    }
}
